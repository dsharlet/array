cc_library(
    name = "array",
    hdrs = [
        "array.h",
        "ein_reduce.h",
        "image.h",
        "matrix.h",
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "array_absl",
    hdrs = ["array_absl.h"],
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/strings:str_format",
    ],
)

cc_test(
    name = "array_test",
    srcs = [
        "test/algorithm.cpp",
        "test/array.cpp",
        "test/ein_reduce.cpp",
        "test/image.cpp",
        "test/lifetime.cpp",
        "test/lifetime.h",
        "test/main.cpp",
        "test/matrix.cpp",
        "test/performance.cpp",
        "test/readme.cpp",
        "test/shape.cpp",
        "test/shuffle.cpp",
        "test/sort.cpp",
        "test/split.cpp",
        "test/test.h",
    ],
    deps = [":array"],
)

cc_test(
    name = "absl_test",
    srcs = [
        "test/absl.cpp",
        "test/main.cpp",
        "test/test.h",
    ],
    deps = [
        ":array",
        ":array_absl",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
    ],
)

# TODO(jiawen): Make this an sh_test?
# This test intentionally fails and prints error messages.
# Test with:
# `bazel test --cxxopt=-ferror-limit=0 --test_output=all :errors_test`
# This test passes if it doesn't contain any lines with error: and array.h.
# I.e., the following should be empty:
# `bazel test --cxxopt=-ferror-limit=0 --test_output=all :errors_test 2>&1 | grep "error:" | grep array.h`
cc_test(
    name = "errors_test",
    srcs = [
        "test/errors.cpp",
    ],
    deps = [":array"],
)
